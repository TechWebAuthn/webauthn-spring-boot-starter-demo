import{WebRTCConnection as t,WebSocketConnection as e}from"./utils/rtc.js";export class WebAuthnRTCEnrollmentProvider extends HTMLElement{constructor(){super(),this.root=this.attachShadow({mode:"open"}),this._onFormSubmitListener=this._onFormSubmit.bind(this),this._onRequestedEnrollmentListener=this._onRequestedEnrollment.bind(this),this.enrollmentTokenUrl="/api/registration/add",this.fetchOptions={method:"GET",credentials:"include",headers:{"Content-Type":"application/json"}},this.webSocketSignalingEndpoint="/api/socket",this.RTC=null,this.rtcIceServers=[{urls:"stun:stun.services.mozilla.com"}]}static get observedAttributes(){return["label","input-type","input-name","button-text"]}connectedCallback(){this.update(),this.root.querySelector("form").addEventListener("submit",this._onFormSubmitListener),this.addEventListener("enrollment-requested",this._onRequestedEnrollmentListener)}disconnectedCallback(){this.root.querySelector("form").removeEventListener("submit",this._onFormSubmitListener),this.removeEventListener("enrollment-requested",this._onRequestedEnrollmentListener)}attributeChangedCallback(t,e,n){if(!this.root.innerHTML)return;if(n===e)return;const i=this.root.querySelector("label"),s=this.root.querySelector("input"),r=this.root.querySelector("button");switch(t){case"label":i.textContent=n||this.label;break;case"button-text":r.textContent=n||this.buttonText;break;case"input-type":s.type=n||this.inputType;break;case"input-name":s.name=n||this.inputName}}update(){this.root.innerHTML||(this.root.innerHTML=`\n        <form part="form">\n          <label part="label" for="peer-code">${this.label}</label>\n          <input part="input" id="peer-code" name="${this.inputName}" type="${this.inputType}" required />\n          <button part="button" type="submit">${this.buttonText}</button>\n        </form>\n      `)}get label(){return this.getAttribute("label")||"Code"}set label(t){this.setAttribute("label",t)}get buttonText(){return this.getAttribute("button-text")||"Connect"}set buttonText(t){this.setAttribute("button-text",t)}get inputType(){return this.getAttribute("input-type")||"text"}set inputType(t){this.setAttribute("input-type",t)}get inputName(){return this.getAttribute("input-name")||"code"}set inputName(t){this.setAttribute("input-name",t)}async _onFormSubmit(n){n.preventDefault();const i=new FormData(n.target).get(this.inputName).toUpperCase();this.dispatchEvent(new CustomEvent("enrollment-started")),this.RTC?.close(),this.RTC=new t(new e(this.webSocketSignalingEndpoint),{iceServers:this.rtcIceServers}),this.RTC.listenForData(),this.RTC.signaling.send({code:i}),this.RTC.ondatachannelmessage=async t=>{const[e,n]=t.data.split("::");"action"===e&&"add"===n&&this.dispatchEvent(new CustomEvent("enrollment-requested")),"action"===e&&"cancel"===n&&this.dispatchEvent(new CustomEvent("enrollment-canceled")),"event"===e&&"complete"===n&&this.dispatchEvent(new CustomEvent("enrollment-completed"))}}async _onRequestedEnrollment(){try{const t=await fetch(this.enrollmentTokenUrl,this.fetchOptions),e=await t.json();if(!t.ok)throw new Error("Could not successfuly retrieve enrollment token");this.RTC.sendData(`token::${e.registrationAddToken}`),this.dispatchEvent(new CustomEvent("enrollment-provided",{detail:e}))}catch(t){this.dispatchEvent(new CustomEvent("enrollment-error",{detail:{message:t.message}}))}this.root.querySelector("input").value=""}}customElements.define("web-authn-rtc-enrollment-provider",WebAuthnRTCEnrollmentProvider);
