import{WebRTCConnection as e,WebSocketConnection as t}from"./utils/rtc.js";const r={};export class WebAuthnRTCEnrollmentRequester extends HTMLElement{constructor(){super(),this.root=this.attachShadow({mode:"open"}),this._onRequestFormSubmitListener=this._onRequestFormSubmit.bind(this),this._onConfirmFormSubmitListener=this._onConfirmFormSubmit.bind(this),this._onConfirmFormResetListener=this._onConfirmFormReset.bind(this),this._onAcceptUserAgreementListener=this._onAcceptUserAgreement.bind(this),this._onEnrollmentProviderConnectedListener=this._onEnrollmentProviderConnected.bind(this),this.enrollmentStartUrl="/api/registration/start",this.enrollmentFinishUrl="/api/registration/finish",this.fetchOptions={method:"POST",credentials:"include",headers:{"Content-Type":"application/json"}},this.webSocketSignalingEndpoint="/api/socket",this.RTC=null,this.rtcIceServers=[{urls:"stun:stun.services.mozilla.com"}]}static get observedAttributes(){return["request-button-text","confirm-button-text","agreement-text","cancel-button-text","peer-code","registration-add-token"]}connectedCallback(){this.update(),this.root.querySelector("#request-form").addEventListener("submit",this._onRequestFormSubmitListener),this.root.querySelector("#confirm-form").addEventListener("submit",this._onConfirmFormSubmitListener),this.root.querySelector("#confirm-form").addEventListener("reset",this._onConfirmFormResetListener),this.root.querySelector("#user-agreement").addEventListener("change",this._onAcceptUserAgreementListener),this.addEventListener("enrollment-provider-connected",this._onEnrollmentProviderConnectedListener)}disconnectedCallback(){this.root.querySelector("#request-form").removeEventListener("submit",this._onRequestFormSubmitListener),this.root.querySelector("#confirm-form").removeEventListener("submit",this._onConfirmFormSubmitListener),this.root.querySelector("#confirm-form").removeEventListener("reset",this._onConfirmFormResetListener),this.root.querySelector("#user-agreement").removeEventListener("change",this._onAcceptUserAgreementListener),this.removeEventListener("enrollment-provider-connected",this._onEnrollmentProviderConnectedListener)}attributeChangedCallback(e,t,r){if(!this.root.innerHTML)return;if(r===t)return;const n=this.root.querySelector("#request-form button"),o=this.root.querySelector("#confirm-form button[type=submit]"),i=this.root.querySelector("#confirm-form button[type=reset]"),s=this.root.querySelector("#confirm-form label span"),a=this.root.querySelector("code");switch(e){case"request-button-text":n.textContent=r||this.requestButtonText;break;case"confirm-button-text":o.textContent=r||this.confirmButtonText;break;case"cancel-button-text":i.textContent=r||this.cancelButtonText;break;case"agreement-text":s.textContent=r||this.agreementText;break;case"peer-code":a.textContent=r,this._shouldShowCode();break;case"registration-add-token":this._onRegistrationAddToken()}}update(){this.root.innerHTML||(this.root.innerHTML=`\n        <form id="request-form" part="form">\n          <button part="button request-button" type="submit">${this.requestButtonText}</button>\n          <code part="code hidden" hidden>${this.peerCode}</code>\n        </form>\n        <form id="confirm-form" part="form hidden" hidden>\n          <label part="label" for="user-agreement">\n            <input part="checkbox" id="user-agreement" type="checkbox" required>\n            <span>${this.agreementText}</span>\n          </label>\n          <button part="button confirm-button" type="submit">${this.confirmButtonText}</button>\n          <button part="button cancel-button" type="reset">${this.cancelButtonText}</button>\n        </form>\n      `)}_shouldShowCode(){this.peerCode?(this.root.querySelector("code").hidden=!1,this.root.querySelector("code").part.remove("hidden")):(this.root.querySelector("code").hidden=!0,this.root.querySelector("code").part.add("hidden"))}get requestButtonText(){return this.getAttribute("request-button-text")||"Generate code"}set requestButtonText(e){this.setAttribute("request-button-text",e)}get confirmButtonText(){return this.getAttribute("confirm-button-text")||"Enroll device"}set confirmButtonText(e){this.setAttribute("confirm-button-text",e)}get cancelButtonText(){return this.getAttribute("cancel-button-text")||"Cancel"}set cancelButtonText(e){this.setAttribute("cancel-button-text",e)}get agreementText(){return this.getAttribute("agreement-text")||"I understand that this device will be added to another account"}set agreementText(e){this.setAttribute("agreement-text",e)}get peerCode(){return this.getAttribute("peer-code")||""}set peerCode(e){this.setAttribute("peer-code",e)}get registrationAddToken(){return this.getAttribute("registration-add-token")||""}set registrationAddToken(e){this.setAttribute("registration-add-token",e)}async _getPublicKeyCredentialCreateOptionsDecoder(){if("function"==typeof this.publicKeyCredentialCreateOptionsDecoder)return this.publicKeyCredentialCreateOptionsDecoder;if("function"==typeof r.publicKeyCredentialCreateOptionsDecoder)return r.publicKeyCredentialCreateOptionsDecoder;const{decodePublicKeyCredentialCreateOptions:e}=await import("./utils/parse.js");return r.publicKeyCredentialCreateOptionsDecoder=e,r.publicKeyCredentialCreateOptionsDecoder}async _getRegisterCredentialEncoder(){if("function"==typeof this.registerCredentialEncoder)return this.registerCredentialEncoder;if("function"==typeof r.registerCredentialEncoder)return r.registerCredentialEncoder;const{encodeRegisterCredential:e}=await import("./utils/parse");return r.registerCredentialEncoder=e,r.registerCredentialEncoder}_onRequestFormSubmit(r){r.preventDefault(),this.dispatchEvent(new CustomEvent("enrollment-code-requested")),this.RTC?.close(),this.RTC=new e(new t(this.webSocketSignalingEndpoint),{iceServers:this.rtcIceServers}),this.RTC.createDataChannel(),this.RTC.oncode=e=>{this.peerCode=e},this.RTC.onuser=async e=>{await this.RTC.createOffer(),this.agreementText=`I understand that this device will be added to ${e}'s account`,this.dispatchEvent(new CustomEvent("enrollment-provider-connected",{detail:e}))}}_onEnrollmentProviderConnected(){this.root.querySelector("#request-form").hidden=!0,this.root.querySelector("#request-form").part.add("hidden"),this.root.querySelector("#confirm-form").hidden=!1,this.root.querySelector("#confirm-form").part.remove("hidden")}_onConfirmFormReset(e){e.preventDefault(),this.dispatchEvent(new CustomEvent("enrollment-canceled")),this.RTC.sendData("action::cancel"),this.RTC?.close(),this.peerCode="",this.root.querySelector("#request-form").hidden=!1,this.root.querySelector("#request-form").part.remove("hidden"),this.root.querySelector("#confirm-form").hidden=!0,this.root.querySelector("#confirm-form").part.add("hidden")}_onAcceptUserAgreement(e){e.target.checked?(this.RTC?.sendData("action::add"),this.dispatchEvent(new CustomEvent("enrollment-agreement-accepted"))):this.dispatchEvent(new CustomEvent("enrollment-agreement-declined")),this.RTC.ondatachannelmessage||(this.RTC.ondatachannelmessage=e=>{const[t,r]=e.data.split("::");"token"===t&&(this.registrationAddToken=r)},this.RTC.listenForData())}_onRegistrationAddToken(){this.dispatchEvent(new CustomEvent("enrollment-registration-token-received"))}async _onConfirmFormSubmit(e){if(e.preventDefault(),this.registrationAddToken){this.dispatchEvent(new CustomEvent("enrollment-started"));try{const e=await fetch(this.enrollmentStartUrl,{...this.fetchOptions,body:JSON.stringify({registrationAddToken:this.registrationAddToken})}),{registrationId:t,publicKeyCredentialCreationOptions:r}=await e.json();if(!e.ok)throw new Error("Could not successfuly start enrollment");const n=await this._getPublicKeyCredentialCreateOptionsDecoder(),o=await navigator.credentials.create({publicKey:n(r)});this.dispatchEvent(new CustomEvent("enrollment-created"));const i=await this._getRegisterCredentialEncoder(),s=await fetch(this.enrollmentFinishUrl,{...this.fetchOptions,body:JSON.stringify({registrationId:t,credential:i(o),userAgent:window.navigator.userAgent})});if(!s.ok)throw new Error("Could not successfuly complete enrollment");const a=await s.json();this.dispatchEvent(new CustomEvent("enrollment-completed",{detail:a})),this.RTC.dataChannel.send("event::complete"),this.registrationAddToken="",this.root.querySelector("#confirm-form").reset()}catch(e){this.dispatchEvent(new CustomEvent("enrollment-error",{detail:{message:e.message}})),this.RTC?.sendData("action::cancel"),this.RTC?.close()}}}}customElements.define("web-authn-rtc-enrollment-requester",WebAuthnRTCEnrollmentRequester);
