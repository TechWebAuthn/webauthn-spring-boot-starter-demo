const t={};export class WebAuthnRecovery extends HTMLElement{constructor(){super(),this.root=this.attachShadow({mode:"open"}),this._onFormSubmitListener=this._onFormSubmit.bind(this),this.recoveryStartUrl="/api/registration/start",this.recoveryFinishUrl="/api/registration/finish",this.fetchOptions={method:"POST",credentials:"include",headers:{"Content-Type":"application/json"}}}static get observedAttributes(){return["label","input-type","input-name","button-text"]}connectedCallback(){this.update(),this.root.querySelector("form").addEventListener("submit",this._onFormSubmitListener)}disconnectedCallback(){this.root.querySelector("form").removeEventListener("submit",this._onFormSubmitListener)}attributeChangedCallback(t,e,r){if(!this.root.innerHTML)return;if(r===e)return;const i=this.root.querySelector("label"),n=this.root.querySelector("input"),o=this.root.querySelector("button");switch(t){case"label":i.textContent=r||this.label;break;case"button-text":o.textContent=r||this.buttonText;break;case"input-type":n.type=r||this.inputType;break;case"input-name":n.name=r||this.inputName}}update(){this.root.innerHTML||(this.root.innerHTML=`\n        <form part="form">\n          <label part="label" for="authn-recovery-token">${this.label}</label>\n          <input part="input" id="authn-recovery-token" type="${this.inputType}" name="${this.inputName}" />\n          <button part="button" type="submit">${this.buttonText}</button>\n        </form>\n      `)}get label(){return this.getAttribute("label")||"Recovery token"}set label(t){this.setAttribute("label",t)}get buttonText(){return this.getAttribute("button-text")||"Recover"}set buttonText(t){this.setAttribute("button-text",t)}get inputType(){return this.getAttribute("input-type")||"text"}set inputType(t){this.setAttribute("input-type",t)}get inputName(){return this.getAttribute("input-name")||"recovery-token"}set inputName(t){this.setAttribute("input-name",t)}async _getPublicKeyCredentialCreateOptionsDecoder(){if("function"==typeof this.publicKeyCredentialCreateOptionsDecoder)return this.publicKeyCredentialCreateOptionsDecoder;if("function"==typeof t.publicKeyCredentialCreateOptionsDecoder)return t.publicKeyCredentialCreateOptionsDecoder;const{decodePublicKeyCredentialCreateOptions:e}=await import("./utils/parse.js");return t.publicKeyCredentialCreateOptionsDecoder=e,t.publicKeyCredentialCreateOptionsDecoder}async _getRegisterCredentialEncoder(){if("function"==typeof this.registerCredentialEncoder)return this.registerCredentialEncoder;if("function"==typeof t.registerCredentialEncoder)return t.registerCredentialEncoder;const{encodeRegisterCredential:e}=await import("./utils/parse.js");return t.registerCredentialEncoder=e,t.registerCredentialEncoder}async _onFormSubmit(t){t.preventDefault(),this.dispatchEvent(new CustomEvent("recovery-started"));const e=new FormData(t.target),r=this.root.querySelector("input"),i=e.get(r.name);try{const t=await fetch(this.recoveryStartUrl,{...this.fetchOptions,body:JSON.stringify({recoveryToken:i})}),{status:e,registrationId:r,publicKeyCredentialCreationOptions:n}=await t.json();if(!t.ok)throw new Error(e||"Could not successfuly start recovery");const o=await this._getPublicKeyCredentialCreateOptionsDecoder(),s=await navigator.credentials.create({publicKey:o(n)});this.dispatchEvent(new CustomEvent("recovery-created"));const a=await this._getRegisterCredentialEncoder(),c=await fetch(this.recoveryFinishUrl,{...this.fetchOptions,body:JSON.stringify({registrationId:r,credential:a(s),userAgent:window.navigator.userAgent})});if(!c.ok)throw new Error("Could not successfuly complete recovery");const u=await c.json();this.dispatchEvent(new CustomEvent("recovery-finished",{detail:u}))}catch(t){this.dispatchEvent(new CustomEvent("recovery-error",{detail:{message:t.message}}))}}}customElements.define("web-authn-recovery",WebAuthnRecovery);
