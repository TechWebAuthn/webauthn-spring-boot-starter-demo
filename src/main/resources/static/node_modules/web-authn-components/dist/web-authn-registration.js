const t={};export class WebAuthnRegistration extends HTMLElement{constructor(){super(),this.root=this.attachShadow({mode:"open"}),this._onFormSubmitListener=this._onFormSubmit.bind(this),this.registrationStartUrl="/api/registration/start",this.registrationFinishUrl="/api/registration/finish",this.fetchOptions={method:"POST",credentials:"include",headers:{"Content-Type":"application/json"}}}static get observedAttributes(){return["no-username","label","input-type","input-name","button-text"]}connectedCallback(){this.update(),this.root.querySelector("form").addEventListener("submit",this._onFormSubmitListener)}disconnectedCallback(){this.root.querySelector("form").removeEventListener("submit",this._onFormSubmitListener)}attributeChangedCallback(t,e,i){if(!this.root.innerHTML)return;if(i===e)return;const r=this.root.querySelector("label"),n=this.root.querySelector("input"),s=this.root.querySelector("button");switch(t){case"no-username":this._shouldUseUsername();break;case"label":r.textContent=i||this.label;break;case"button-text":s.textContent=i||this.buttonText;break;case"input-type":n.type=i||this.inputType;break;case"input-name":n.name=i||this.inputName}}update(){this.root.innerHTML||(this.root.innerHTML=`\n        <form part="form">\n          <label part="label" for="authn-username">${this.label}</label>\n          <input part="input" id="authn-username" type="${this.inputType}" name="${this.inputName}" />\n          <button part="button" type="submit">${this.buttonText}</button>\n        </form>\n      `),this._shouldUseUsername()}get noUsername(){return this.hasAttribute("no-username")}set noUsername(t){t?this.setAttribute("no-username",""):this.removeAttribute("no-username")}get label(){return this.getAttribute("label")||"Username"}set label(t){this.setAttribute("label",t)}get buttonText(){return this.getAttribute("button-text")||"Register"}set buttonText(t){this.setAttribute("button-text",t)}get inputType(){return this.getAttribute("input-type")||"text"}set inputType(t){this.setAttribute("input-type",t)}get inputName(){return this.getAttribute("input-name")||"username"}set inputName(t){this.setAttribute("input-name",t)}_shouldUseUsername(){const t=this.root.querySelector("input"),e=this.root.querySelector("label");this.noUsername?(t.required=!1,t.hidden=!0,e.hidden=!0,t.value=""):(t.required=!0,t.hidden=!1,e.hidden=!1)}async _getPublicKeyCredentialCreateOptionsDecoder(){if("function"==typeof this.publicKeyCredentialCreateOptionsDecoder)return this.publicKeyCredentialCreateOptionsDecoder;if("function"==typeof t.publicKeyCredentialCreateOptionsDecoder)return t.publicKeyCredentialCreateOptionsDecoder;const{decodePublicKeyCredentialCreateOptions:e}=await import("./utils/parse.js");return t.publicKeyCredentialCreateOptionsDecoder=e,t.publicKeyCredentialCreateOptionsDecoder}async _getRegisterCredentialEncoder(){if("function"==typeof this.registerCredentialEncoder)return this.registerCredentialEncoder;if("function"==typeof t.registerCredentialEncoder)return t.registerCredentialEncoder;const{encodeRegisterCredential:e}=await import("./utils/parse.js");return t.registerCredentialEncoder=e,t.registerCredentialEncoder}async _onFormSubmit(t){t.preventDefault(),this.dispatchEvent(new CustomEvent("registration-started"));const e=new FormData(t.target),i=this.root.querySelector("input"),r=e.get(i.name);try{const t=await fetch(this.registrationStartUrl,{...this.fetchOptions,body:JSON.stringify({username:r})}),{status:e,registrationId:i,publicKeyCredentialCreationOptions:n}=await t.json();if(!t.ok)throw new Error(e||"Could not successfuly start registration");const s=await this._getPublicKeyCredentialCreateOptionsDecoder(),o=await navigator.credentials.create({publicKey:s(n)});this.dispatchEvent(new CustomEvent("registration-created"));const a=await this._getRegisterCredentialEncoder(),u=await fetch(this.registrationFinishUrl,{...this.fetchOptions,body:JSON.stringify({registrationId:i,credential:a(o),userAgent:window.navigator.userAgent})});if(!u.ok)throw new Error("Could not successfuly complete registration");const c=await u.json();this.dispatchEvent(new CustomEvent("registration-finished",{detail:c}))}catch(t){this.dispatchEvent(new CustomEvent("registration-error",{detail:{message:t.message}}))}}}customElements.define("web-authn-registration",WebAuthnRegistration);
